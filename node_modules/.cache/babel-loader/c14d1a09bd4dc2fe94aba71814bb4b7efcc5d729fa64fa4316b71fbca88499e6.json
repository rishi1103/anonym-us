{"ast":null,"code":"var _jsxFileName = \"/Users/rishipoonia/Downloads/Anonym-us/react-app/my-app/src/CreateThreadScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './CreateThreadScreen.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CreateThreadScreen = () => {\n  _s();\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n  const handleCreateThread = () => {\n    // Perform thread creation logic here\n    if (title && content) {\n      // Process the thread data, for example, send a request to an API or save to the database\n      console.log('Thread created successfully!');\n      // Optionally, you can redirect the user to a different page after successful thread creation\n    } else {\n      console.log('Please fill in all the required fields');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"create-thread-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Create Thread\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"create-thread-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Thread Title\",\n        value: title,\n        onChange: e => setTitle(e.target.value),\n        className: \"create-thread-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: \"Thread Content\",\n        value: content,\n        onChange: e => setContent(e.target.value),\n        className: \"create-thread-textarea\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCreateThread,\n        className: \"create-thread-button\",\n        children: \"Create Thread\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n_s(CreateThreadScreen, \"OTvljkGZ3oDHjpEqZRGoAyVoe2c=\");\n_c = CreateThreadScreen;\nexport default CreateThreadScreen;\nvar _c;\n$RefreshReg$(_c, \"CreateThreadScreen\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","CreateThreadScreen","_s","title","setTitle","content","setContent","handleCreateThread","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/rishipoonia/Downloads/Anonym-us/react-app/my-app/src/CreateThreadScreen.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './CreateThreadScreen.css';\n\nconst CreateThreadScreen = () => {\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n\n  const handleCreateThread = () => {\n    // Perform thread creation logic here\n    if (title && content) {\n      // Process the thread data, for example, send a request to an API or save to the database\n      console.log('Thread created successfully!');\n      // Optionally, you can redirect the user to a different page after successful thread creation\n    } else {\n      console.log('Please fill in all the required fields');\n    }\n  };\n\n  return (\n    <div className=\"create-thread-container\">\n      <h2>Create Thread</h2>\n      <form className=\"create-thread-form\">\n        <input\n          type=\"text\"\n          placeholder=\"Thread Title\"\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n          className=\"create-thread-input\"\n        />\n        <textarea\n          placeholder=\"Thread Content\"\n          value={content}\n          onChange={(e) => setContent(e.target.value)}\n          className=\"create-thread-textarea\"\n        />\n        <button onClick={handleCreateThread} className=\"create-thread-button\">Create Thread</button>\n      </form>\n    </div>\n  );\n};\n\nexport default CreateThreadScreen;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAE1C,MAAMS,kBAAkB,GAAGA,CAAA,KAAM;IAC/B;IACA,IAAIJ,KAAK,IAAIE,OAAO,EAAE;MACpB;MACAG,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;MAC3C;IACF,CAAC,MAAM;MACLD,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;IACvD;EACF,CAAC;EAED,oBACET,OAAA;IAAKU,SAAS,EAAC,yBAAyB;IAAAC,QAAA,gBACtCX,OAAA;MAAAW,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtBf,OAAA;MAAMU,SAAS,EAAC,oBAAoB;MAAAC,QAAA,gBAClCX,OAAA;QACEgB,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,cAAc;QAC1BC,KAAK,EAAEf,KAAM;QACbgB,QAAQ,EAAGC,CAAC,IAAKhB,QAAQ,CAACgB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QAC1CR,SAAS,EAAC;MAAqB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChC,CAAC,eACFf,OAAA;QACEiB,WAAW,EAAC,gBAAgB;QAC5BC,KAAK,EAAEb,OAAQ;QACfc,QAAQ,EAAGC,CAAC,IAAKd,UAAU,CAACc,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QAC5CR,SAAS,EAAC;MAAwB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnC,CAAC,eACFf,OAAA;QAAQsB,OAAO,EAAEf,kBAAmB;QAACG,SAAS,EAAC,sBAAsB;QAAAC,QAAA,EAAC;MAAa;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV,CAAC;AAACb,EAAA,CApCID,kBAAkB;AAAAsB,EAAA,GAAlBtB,kBAAkB;AAsCxB,eAAeA,kBAAkB;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}